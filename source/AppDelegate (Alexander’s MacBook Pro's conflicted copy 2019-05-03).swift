import UIKit

@UIApplicationMain class AppDelegate: UIResponder, UIApplicationDelegate {
    var window: UIWindow?
    
    let r = Aver<String>()
    
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        
        generateReadme()
        
        return true
    }
    
    func diffSection() -> Tree<Element<String>> {
        
        return .doc() -- [
            .header("Diffing", level: 2)-,
            .text("were gonna talk about diffing")-
        ]
    }
    
    func generateReadme() {
        
        let treeText =
        """
            .doc() -- [
                .blockQuoted() -- [
                    .text("NOTE: this ReadMe is generated by Aver itself.")-,
                    .text("The rendering code is the following: ")-
                ],
                .codeBlock() -- [
                    .text(treeText)-
                ],
                .header("Aver")-,
                .divider()-,
                .text("topics")-,
                .list() -- [
                    .text("diffing")-,
                    .text("resolving")-,
                    .text("rendering")-,
                ]
            ]
        """
        
        var children: [Tree<Element<String>>] = [
            .blockQuoted() -- [
                .text("NOTE: this ReadMe is generated by Aver itself.")-,
                .newLine()-,
                .text("The rendering code is the following: ")-
            ],
            .codeBlock() -- [
                .text(treeText)-
            ],
            .header("Aver", level: 3)-,
            .divider()-,
            .text("topics")-,
            .list() -- [
                .link(url: "#diffing", text: "diffing")-,
                .text("resolving")-,
                .text("rendering")-,
            ]
        ]
        let dividers = Array(repeating: "", count: 100).map { _ in Element<String>.divider()- }
        children.append(contentsOf: dividers)
        children.append(diffSection())

        let tr: Tree<Element<String>> = .doc() -- children
        
        let result = r.render(tr)
        print(result)
    }
}
