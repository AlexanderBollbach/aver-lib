import UIKit

@UIApplicationMain class AppDelegate: UIResponder, UIApplicationDelegate {
    var window: UIWindow?
    
    let aver = Aver<String>()
    
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        
        var rm = generateReadme()
        rm = generateReadme(readmeTreeLog: rm.log(siblingSize: 3))
        let result = aver.render(rm)
        
        let fm = FileManager.default
        fm.createFile(atPath: "/Users/abollba/Desktop/test.md", contents: result.data(using: .utf8), attributes: nil)
        
        return true
    }
    
    func fluff() -> Tree<Element<String>> {
        return .doc() -- [
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            .text("yadda yadda yadda")-,
            
        ]
    }
    
    func overview(readmeTreeLog: String) -> Tree<Element<String>> {
        return .doc() -- [
            .header("Overview", level: 2)-,
            .blockQuoted() -- [
                .text("note: this README was generated by Aver by rendering the following Element tree:")-,
            ],
            .codeBlock() -- [
                .text(readmeTreeLog)-
            ],
            fluff()
        ]
    }
    
    func diffing() -> Tree<Element<String>> {
        return .doc() -- [
            .header("Diffing", level: 2)-,
            fluff()
        ]
    }
    
    func elements() -> Tree<Element<String>> {
        return .doc() -- [
            .header("Elements", level: 2)-,
            fluff()
        ]
    }
    
    func resolving() -> Tree<Element<String>> {
        return .doc() -- [
            .header("Resolving", level: 2)-,
            fluff()
        ]
    }
    
    func rendering() -> Tree<Element<String>> {
        return .doc() -- [
            .header("Rendering", level: 2)-,
            fluff()
        ]
    }
    
    func main() -> Tree<Element<String>> {
        
        return .doc() -- [
            .header("Aver", level: 1)-,
            .header("topics", level: 4)-,
            .list() -- [
                .link(url: "#overview", text: "Overview")-,
                .link(url: "#elements", text: "Elements")-,
                .link(url: "#diffing", text: "Diffing")-,
                .link(url: "#resolving", text: "Resolving")-,
                .link(url: "#rendering", text: "Rendering")-
            ],
            .newLine()-
        ]
    }
    
    func generateReadme(readmeTreeLog: String = "") -> Tree<Element<String>> {
        let rm = .doc() -- [
            main(),
            overview(readmeTreeLog: readmeTreeLog),
            elements(),
            diffing(),
            resolving(),
            rendering(),
        ]
        
        print(rm.log(siblingSize: 3))
        
        return rm
    }
}
